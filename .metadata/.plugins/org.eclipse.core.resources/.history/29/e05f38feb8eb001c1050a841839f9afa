package com.example.CompanyStockPrice.Controller;

import java.text.DateFormat;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.example.CompanyStockPrice.Entity.Company;
import com.example.CompanyStockPrice.Entity.Stock;
import com.example.CompanyStockPrice.Service.CompanyStockService;


@RestController
public class CompanyStockController {
	
	@Autowired
	CompanyStockService companyStockService;
	
	
	@GetMapping("/ListAllComapany")
	public List<Company> listAllCompany()
	{
		return companyStockService.listAllCompany();
	}
	
	@GetMapping("/ListAllStock")
	public List<Stock> listAllStock()
	{
		return companyStockService.listAllStock();
	}
	
	@GetMapping("/FindStockByCompanyCode/{companyCode}")
	public List<Stock> findAllStockByCompanyCode(@PathVariable int companyCode)
	{
		return companyStockService.findAllStockByCompanyCode(companyCode);
	}
	
	@DeleteMapping("/RemoveCompany/{companyCode}")
	public String deleteCompanyAndStock(@PathVariable int companyCode)
	{
		companyStockService.deleteCompanyAndStock(companyCode);
		return "company deleted successfully";
	}
	
	@GetMapping("/GetStockByDates")
	public List<Stock> betweenDate(@RequestParam int companyCode,@RequestParam String fromDate,@RequestParam String endDate)
	{
		LocalDate fromDt = LocalDate.parse(fromDate);
		LocalDate endDt = LocalDate.parse(endDate);
		return companyStockService.betweenDate(companyCode, fromDt, endDt);
	}
	
/*	
	@GetMapping("/GetMinMaxAvgPrice/{companyCode}/{fromDate}/{endDate}")
	public List<Optional<Stock>> minMaxAvgPrice(@PathVariable int companyCode,@PathVariable LocalDate fromDate,@PathVariable LocalDate endDate)
	{
		List<Stock> stock = companyStockService.betweenDate(companyCode, fromDate, endDate);
	    Optional<Stock> minPrice = stock.stream().min(Comparator.comparing(Stock::getPrice));
	    Optional<Stock> maxPrice = stock.stream().max(Comparator.comparing(Stock::getPrice));
	    Optional<Stock> AvgPrice = companyStockService.getAvgPrice(companyCode, fromDate, endDate);
		List<Optional<Stock>> price = Arrays.asList(minPrice,maxPrice,AvgPrice);
	    return price;
	}*/

}
